services:
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    ports:
      - "9080:9080"
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ../monitoring/promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    privileged: true

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ../monitoring/loki-config.yaml:/etc/loki/local-config.yaml

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheusdata:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    env_file:
      - ./.env
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ./grafana/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - grafanadata:/var/lib/grafana

  db:
    image: postgres:17.5-alpine
    container_name: postgres_db
    restart: unless-stopped
    env_file:
      - ./.env
    volumes:
      - pg_data_volleybolley:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 30

  redis:
    image: redis:7-alpine
    container_name: volleybolley_redis
    restart: unless-stopped
    command:
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M

  backend:
    container_name: volleybolley_backend
    build: ../backend
    env_file: ./.env
    volumes:
      - static:/app/backend_static
      - media:/app/media
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [
        "CMD-SHELL",
        "python -c \"import requests; exit(0 if requests.get('http://localhost:8000/admin/').status_code == 200 else 1)\""
      ]
      interval: 5s
      timeout: 5s
      retries: 30
  
  celery_worker:
    container_name: volleybolley_celery_worker
    build: ../backend
    command: celery -A volleybolley worker -l info --concurrency=${CELERY_WORKER_CONCURRENCY:-2}
    env_file: ./.env
    environment:
      - REDIS_HOST=redis
    volumes:
      - media:/app/media
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

  celery_beat:
    container_name: volleybolley_celery_beat
    build: ../backend
    command: celery -A volleybolley beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file: ./.env
    environment:
      - REDIS_HOST=redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      backend:
        condition: service_healthy
    restart: unless-stopped

  nginx:
    container_name: volleybolley-proxy
    build: ../infra
    env_file: ./.env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static:/staticfiles
      - media:/media
    depends_on:
      backend:
        condition: service_healthy

volumes:
  pg_data_volleybolley:
  redis_data:
  static:
  media: