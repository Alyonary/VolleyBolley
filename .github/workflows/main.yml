name: Test And VolleyBolley
on:
  push:
    branches:
      - main

env:
  DATABASE_URL: postgres://django_user:django_password@localhost:5432/django_db
  PYTHON_VERSION: 3.11

jobs:

  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17.5-alpine
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip 
          pip install poetry
          poetry install --no-root --no-interaction
      - name: Run lint and tests
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: False
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
        run: |
          cd backend/
          ruff check
          pytest tests/ --cov=apps --cov-report=xml

  build_and_push_to_docker_hub:
    if: github.ref_name == 'main'
    name: Push backend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: dorofrik/volleybolley-back:latest

  build_gateway_and_push_to_docker_hub:
    if: github.ref_name == 'main'
    name: Push gateway Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./infra/
          push: true
          tags: dorofrik/volleybolley-proxy:latest

  deploy:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs: 
      - build_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        source: "docker-compose.production.yml"
        target: "volleybolley"

    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          mkdir -p volleybolley
          cd volleybolley
          sudo docker compose -f docker-compose.production.yml pull
          sudo docker compose -f docker-compose.production.yml down
          sudo docker compose -f docker-compose.production.yml up -d

    - name: Cleanup old images
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        passphrase: ${{ secrets.SSH_PASSPHRASE }}
        script: |
          docker image prune -f
          docker network prune -f
          docker builder prune -f

  send_message:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: |
          ✅ Деплой VolleyBolley успешно выполнен!
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Workflow: ${{ github.workflow }}
